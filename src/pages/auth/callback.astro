---
import Layout from '../../layouts/Layout.astro'
---

<Layout title="Authentication - SKY DUMP">
  <div id="auth-callback-app"></div>
</Layout>

<script>
  import { createRoot } from 'react-dom/client'
  import React, { useEffect, useState } from 'react'

  function AuthCallback() {
    const [status, setStatus] = useState('processing')
    const [message, setMessage] = useState('Processing authentication...')

    useEffect(() => {
      const handleCallback = async () => {
        try {
          const urlParams = new URLSearchParams(window.location.search)
          const code = urlParams.get('code')
          const error = urlParams.get('error')

          if (error) {
            setStatus('error')
            setMessage(`Authentication failed: ${error}`)
            return
          }

          if (!code) {
            setStatus('error')
            setMessage('No authorization code received')
            return
          }

          // Exchange code for tokens via our API
          const response = await fetch('/api/auth/callback', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ code }),
          })

          if (!response.ok) {
            throw new Error('Failed to exchange authorization code')
          }

          const data = await response.json()

          // Store tokens in localStorage (in production, use secure httpOnly cookies)
          localStorage.setItem('access_token', data.access_token)
          localStorage.setItem('user_info', JSON.stringify(data.user_info))

          setStatus('success')
          setMessage('Authentication successful! Redirecting...')

          // Redirect to dashboard after successful authentication
          setTimeout(() => {
            window.location.href = '/dashboard'
          }, 2000)

        } catch (error) {
          console.error('Authentication error:', error)
          setStatus('error')
          setMessage('Authentication failed. Please try again.')
        }
      }

      handleCallback()
    }, [])

    return React.createElement('div', { className: 'min-h-screen bg-gray-50 flex items-center justify-center' },
      React.createElement('div', { className: 'max-w-md w-full bg-white rounded-lg shadow-md p-8' },
        React.createElement('div', { className: 'text-center' },
          // Loading/Success/Error Icon
          status === 'processing' && React.createElement('div', { className: 'mb-4' },
            React.createElement('div', { className: 'animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto' })
          ),

          status === 'success' && React.createElement('div', { className: 'mb-4' },
            React.createElement('div', { className: 'w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto' },
              React.createElement('svg', { className: 'w-6 h-6 text-green-600', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' },
                React.createElement('path', { strokeLinecap: 'round', strokeLinejoin: 'round', strokeWidth: 2, d: 'M5 13l4 4L19 7' })
              )
            )
          ),

          status === 'error' && React.createElement('div', { className: 'mb-4' },
            React.createElement('div', { className: 'w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto' },
              React.createElement('svg', { className: 'w-6 h-6 text-red-600', fill: 'none', stroke: 'currentColor', viewBox: '0 0 24 24' },
                React.createElement('path', { strokeLinecap: 'round', strokeLinejoin: 'round', strokeWidth: 2, d: 'M6 18L18 6M6 6l12 12' })
              )
            )
          ),

          // Title
          React.createElement('h1', { className: 'text-2xl font-bold text-gray-900 mb-2' },
            status === 'processing' ? 'Authenticating...' :
            status === 'success' ? 'Success!' :
            'Authentication Failed'
          ),

          // Message
          React.createElement('p', {
            className: `text-sm mb-6 ${
              status === 'error' ? 'text-red-600' :
              status === 'success' ? 'text-green-600' :
              'text-gray-600'
            }`
          }, message),

          // Action buttons
          status === 'error' && React.createElement('div', { className: 'space-y-3' },
            React.createElement('button', {
              onClick: () => window.location.href = '/',
              className: 'w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'
            }, 'Try Again'),
            React.createElement('button', {
              onClick: () => window.location.href = '/',
              className: 'w-full px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors'
            }, 'Go Home')
          )
        )
      )
    )
  }

  const container = document.getElementById('auth-callback-app')
  if (container) {
    const root = createRoot(container)
    root.render(React.createElement(AuthCallback))
  }
</script>
</Layout>
